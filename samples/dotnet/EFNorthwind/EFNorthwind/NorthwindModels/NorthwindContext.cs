// ===============================================================================
// Alachisoft (R) NosDB Sample Code.
// ===============================================================================
// Copyright © Alachisoft.  All rights reserved.
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY
// OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT
// LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
// FITNESS FOR A PARTICULAR PURPOSE.
// ===============================================================================

using System;
using Microsoft.EntityFrameworkCore;
using System.Configuration;
using Microsoft.EntityFrameworkCore.Metadata;

namespace NosDB.Samples.NorthwindModels
{
    /// <summary>
    /// The database context class that inherits from DbContext.
    /// This class is generated by Enitty framework by using database first approach on northwind database.
    /// The instance of this class is used to perform any operation on the database.
    /// </summary>
    public partial class NorthwindContext : DbContext
    {
        /// <summary>
        /// This method is used to configure the provider used by Entity framework.
        /// This method is called by Entity framework when a new instance of this class is made. 
        /// Any configuration that is related to database can be done in this method.
        /// </summary>
        /// <param name="optionsBuilder"></param>
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            #warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
            // Read connection string from app.config
            string connectionString = ConfigurationManager.AppSettings["ConnectionString"];

            if (string.IsNullOrEmpty(connectionString))
            {
                throw new Exception("The connection string cannot be null or empty.");
            }

            // 'UseNosDb' method dictates that nosdb will be used when using this database context class.
            optionsBuilder.UseNosDb(connectionString);
        }

        /// <summary>
        /// This method is used by Entity framework to create an in-Memory model of the database
        /// The model created by this method is used in different operations such as API, queries etc.
        /// This method is called by Entity framework when a new instance of this database context is created.
        /// </summary>
        /// <param name="modelBuilder"></param>
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Categories>(entity =>
            {
                entity.HasKey(e => e.CategoryId)
                    .HasName("PK_categories");

                entity.ToTable("categories");

                entity.Property(e => e.CategoryId)
                    .HasColumnName("CategoryID")
                    .ValueGeneratedNever();

                entity.Property(e => e.CategoryName).HasColumnType("nvarchar(max)");

                entity.Property(e => e.Description).HasColumnType("nvarchar(max)");

                entity.Property(e => e.ProductId).HasColumnName("ProductID");
            });

            modelBuilder.Entity<Category>(entity =>
            {
                entity.HasKey(e => e.ProductId)
                    .HasName("PK_Category");

                entity.Property(e => e.ProductId)
                    .HasColumnName("ProductID")
                    .ValueGeneratedNever();

                entity.Property(e => e.CategoryId).HasColumnName("CategoryID");

                entity.Property(e => e.CategoryName).HasColumnType("nvarchar(max)");

                entity.HasOne(d => d.Product)
                    .WithOne(p => p.Category)
                    .HasForeignKey<Category>(d => d.ProductId)
                    .OnDelete(DeleteBehavior.Cascade);
            });

            modelBuilder.Entity<Customers>(entity =>
            {
                entity.HasKey(e => e.CustomerId)
                    .HasName("PK_customers");

                entity.ToTable("customers");

                entity.Property(e => e.CustomerId)
                    .HasColumnName("CustomerID")
                    .HasColumnType("nvarchar(max)");

                entity.Property(e => e.Address).HasColumnType("nvarchar(max)");

                entity.Property(e => e.City).HasColumnType("nvarchar(max)");

                entity.Property(e => e.CompanyName).HasColumnType("nvarchar(max)");

                entity.Property(e => e.ContactName).HasColumnType("nvarchar(max)");

                entity.Property(e => e.ContactTitle).HasColumnType("nvarchar(max)");

                entity.Property(e => e.Country).HasColumnType("nvarchar(max)");

                entity.Property(e => e.Fax).HasColumnType("nvarchar(max)");

                entity.Property(e => e.Phone).HasColumnType("nvarchar(max)");

                entity.Property(e => e.PostalCode).HasColumnType("nvarchar(max)");

                entity.Property(e => e.Region).HasColumnType("nvarchar(max)");
            });

            modelBuilder.Entity<Employees>(entity =>
            {
                entity.HasKey(e => e.EmployeeId)
                    .HasName("PK_employees");

                entity.ToTable("employees");

                entity.Property(e => e.EmployeeId)
                    .HasColumnName("EmployeeID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Address).HasColumnType("nvarchar(max)");

                entity.Property(e => e.BirthDate).HasColumnType("datetime");

                entity.Property(e => e.City).HasColumnType("nvarchar(max)");

                entity.Property(e => e.Country).HasColumnType("nvarchar(max)");

                entity.Property(e => e.Extension).HasColumnType("nvarchar(max)");

                entity.Property(e => e.FirstName).HasColumnType("nvarchar(max)");

                entity.Property(e => e.HireDate).HasColumnType("datetime");

                entity.Property(e => e.HomePhone).HasColumnType("nvarchar(max)");

                entity.Property(e => e.LastName).HasColumnType("nvarchar(max)");

                entity.Property(e => e.Notes).HasColumnType("nvarchar(max)");

                entity.Property(e => e.PostalCode).HasColumnType("nvarchar(max)");

                entity.Property(e => e.Region).HasColumnType("nvarchar(max)");

                entity.Property(e => e.Title).HasColumnType("nvarchar(max)");

                entity.Property(e => e.TitleOfCourtesy).HasColumnType("nvarchar(max)");
            });

            modelBuilder.Entity<OrderDetails>(entity =>
            {
                entity.HasKey(e => e.OrderId)
                   .HasName("PK_OrderId");

                entity.Property(e => e.Discount).HasColumnType("double");

                entity.Property(e => e.OrderId).HasColumnName("OrderID");

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.UnitPrice).HasColumnType("double");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderDetails)
                    .HasForeignKey(d => d.OrderId);
            });

            modelBuilder.Entity<Orders>(entity =>
            {
                entity.HasKey(e => e.OrderId)
                    .HasName("PK_orders");

                entity.ToTable("orders");

                entity.Property(e => e.OrderId)
                    .HasColumnName("OrderID")
                    .ValueGeneratedNever();

                entity.Property(e => e.CustomerId)
                    .HasColumnName("CustomerID")
                    .HasColumnType("nvarchar(max)");

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.Freight).HasColumnType("double");

                entity.Property(e => e.OrderDate).HasColumnType("datetime");

                entity.Property(e => e.RequiredDate).HasColumnType("datetime");

                entity.Property(e => e.ShipAddress).HasColumnType("nvarchar(max)");

                entity.Property(e => e.ShipCity).HasColumnType("nvarchar(max)");

                entity.Property(e => e.ShipName).HasColumnType("nvarchar(max)");

                entity.Property(e => e.ShipPostalCode).HasColumnType("nvarchar(max)");

                entity.Property(e => e.ShipRegion).HasColumnType("nvarchar(max)");

                entity.Property(e => e.Shipcountry).HasColumnType("nvarchar(max)");

                entity.Property(e => e.ShippedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<Products>(entity =>
            {
                entity.HasKey(e => e.ProductId)
                    .HasName("PK_products");

                entity.ToTable("products");

                entity.Property(e => e.ProductId)
                    .HasColumnName("ProductID")
                    .ValueGeneratedNever();

                entity.Property(e => e.ProductName).HasColumnType("nvarchar(max)");

                entity.Property(e => e.QuantityPerUnit).HasColumnType("nvarchar(max)");

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");

                entity.Property(e => e.UnitPrice).HasColumnType("double");
            });

            modelBuilder.Entity<Shippers>(entity =>
            {
                entity.HasKey(e => e.ShipperId)
                    .HasName("PK_shippers");

                entity.ToTable("shippers");

                entity.Property(e => e.ShipperId)
                    .HasColumnName("ShipperID")
                    .ValueGeneratedNever();

                entity.Property(e => e.CompanyName).HasColumnType("nvarchar(max)");

                entity.Property(e => e.Phone).HasColumnType("nvarchar(max)");
            });

            modelBuilder.Entity<Suppliers>(entity =>
            {
                entity.HasKey(e => e.SupplierId)
                    .HasName("PK_suppliers");

                entity.ToTable("suppliers");

                entity.Property(e => e.SupplierId)
                    .HasColumnName("SupplierID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Address).HasColumnType("nvarchar(max)");

                entity.Property(e => e.City).HasColumnType("nvarchar(max)");

                entity.Property(e => e.CompanyName).HasColumnType("nvarchar(max)");

                entity.Property(e => e.ContactName).HasColumnType("nvarchar(max)");

                entity.Property(e => e.ContactTitle).HasColumnType("nvarchar(max)");

                entity.Property(e => e.Country).HasColumnType("nvarchar(max)");

                entity.Property(e => e.Fax).HasColumnType("nvarchar(max)");

                entity.Property(e => e.HomePage).HasColumnType("nvarchar(max)");

                entity.Property(e => e.Phone).HasColumnType("nvarchar(max)");

                entity.Property(e => e.PostalCode).HasColumnType("nvarchar(max)");

                entity.Property(e => e.Region).HasColumnType("nvarchar(max)");
            });
        }


        // The properties below are the collections that are present in the database and will be accessible to
        // user for performing several different operations. 
        public virtual DbSet<Categories> Categories { get; set; }
        public virtual DbSet<Category> Category { get; set; }
        public virtual DbSet<Customers> Customers { get; set; }
        public virtual DbSet<Employees> Employees { get; set; }
        public virtual DbSet<OrderDetails> OrderDetails { get; set; }
        public virtual DbSet<Orders> Orders { get; set; }
        public virtual DbSet<Products> Products { get; set; }
        public virtual DbSet<Shippers> Shippers { get; set; }
        public virtual DbSet<Suppliers> Suppliers { get; set; }
    }
}